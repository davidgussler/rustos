// At this time, desyrdl does not support some sw access properties
// depreciating this file for now.

addrmap examp_regs {
    name = "RDL Example";
    desc = "Example register description.";

    default accesswidth = 32;
    default regwidth = 32;

    reg {
        name = "Scratchpad Register";
        desc = "Scratchpad register for FPGA firmware testing.";

        field {
            sw = rw;
            hw = r;
        } scratchpad[31:0] = 0;

    } scratchpad;

    reg {
        name = "FPGA Version Register";
        desc = "Read-only FPGA version register. A new version here indicates 
        that the FPGA HDL has changed in some meaningful way.";

        default sw = r;
        default hw = w;

        field {} major[31:16];
        field {} minor[15:0];

    } version @ 0x4;

    reg {
        name = "Control Register";
        desc = "Overall control register.";

        field {
            name = "Control 0";
            sw = rw;
            hw = r;
        } ctl0[0:0] = 1;
        
        field {
            name = "Control 1";
            sw = rw;
            hw = r;
        } ctl1[1:1] = 1;

    } control @ 0x8;

    reg {
        name = "Status Register";
        desc = "Overall status register.";

        field {
            name = "Status 0";
            sw = r;
            hw = w;
        } sts0[0:0];

        field {
            name = "Status 1";
            sw = r;
            hw = w;
        } sts1[1:1];

    } status @ 0xC;

    reg {
        name = "Mixed Register";
        desc = "Mixed register with loads of functionality.";

        counter_field_t #(
            .NAME("Example Counter field name")
        ) count0[7:0] = 0;

        count0->name = "Incrementing Count Register";

        flag_field_t #(
            .NAME("Example Flag field name"), 
            .DESC("Example Flag field desc.")
        ) events[15:8] = 0;

        hwrw_field_t hwrwf[23:16] = 10;

        rw_field_t #(
            .NAME("Example RW field name"), 
            .DESC("Example RW field desc.")
        ) rwf[31:24];

    } mixed[4] @ 0x14; // Array starting at address 14

    regfile {
        reg {
            name = "Pulse Register";
            pulse_field_t pulse;
        } pulse;
    } examp_regfile;

    reg {
        desc = "test register, SW and HW can write, we flag needed to trigger write from hw";
        default sw = rw;
        default hw = r;
        //default we;
        default swacc;
        default swmod;
        field {} data[32] = 0x0000000B;
    } TEST;

    reg {
        desc = "test register, SW and HW can write, we flag needed to trigger write from hw";
        default sw = rw;
        default hw = r;
        //default we;
        default swacc;
        default swmod;
        field {} data[32] = 0x0000000B;
    } TEST2;

};